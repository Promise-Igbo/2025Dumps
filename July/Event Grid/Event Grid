# Create Azure Event Grid resources
az group create --name myResourceGroup --location eastus

let rNum=$RANDOM
resourceGroup=myResourceGroup
location=eastus
topicName="mytopic-evgtopic-${rNum}"
siteName="evgsite-${rNum}"
siteURL="https://${siteName}.azurewebsites.net"

# Enable an Event Grid resource provider
az provider register --namespace Microsoft.EventGrid
az provider show --namespace Microsoft.EventGrid --query "registrationState"

# Create a topic in Event Grid
az eventgrid topic create --name $topicName \
    --location $location \
    --resource-group $resourceGroup

# Create a message endpoint
# Before subscribing to the custom topic, we need to create the endpoint for the event message.
# the endpoint takes actions based on the event data.
az deployment group create \
    --resource-group $resourceGroup \
    --template-uri "https://raw.githubusercontent.com/Azure-Samples/azure-event-grid-viewer/main/azuredeploy.json" \
    --parameters siteName=$siteName hostingPlanName=viewerhost

echo "Your web app URL: $siteURL"

# navigate to the URL generated, the site with no messages currently displayed.
# Leave the browser running, it is used to show updates.

# Subscribe to the topic
# The following script retrieves the subscription ID from your account and uses it in the creation of the event subscription.
endpoint="$siteURL/api/updates"
topicId=$(az eventgrid topic show --resource-group $resourceGroup \
    --name $topicName --query "id" --output tsv)

az eventgrid event-subscription create \
    --source-resource-id $topicId \
    --name TopicSubscription \
    --endpoint $endpoint

# View your web app again, and notice that a subscription validation event has been sent to it.
# Select the eye icon to expand the event data.
# Event Grid sends the validation event so the endpoint can verify that it wants to receive event data. 
# The web app includes code to validate the subscription.

# Send an event with a .NET console application
mkdir eventgrid
cd eventgrid
# Create the .NET console application.
dotnet new console
# Run the following commands to add the Azure.Messaging.EventGrid and dotenv.net packages to the project.
dotnet add package Azure.Messaging.EventGrid
dotnet add package dotenv.net

# Configure the console application
# retrieve the topic endpoint and access key so they can be added to a .env file to hold those secrets.
az eventgrid topic show --name $topicName -g $resourceGroup --query "endpoint" --output tsv
# https://mytopic-evgtopic-10599.eastus-1.eventgrid.azure.net/api/events
az eventgrid topic key list --name $topicName -g $resourceGroup --query "key1" --output tsv
# save the output

# create the .env file to hold the secrets
touch .env
code .env
# Replace YOUR_TOPIC_ENDPOINT and YOUR_TOPIC_ACCESS_KEY on the .env file
TOPIC_ENDPOINT="YOUR_TOPIC_ENDPOINT"
TOPIC_ACCESS_KEY="YOUR_TOPIC_ACCESS_KEY"
# i.e
TOPIC_ENDPOINT="https://mytopic-evgtopic-10599.eastus-1.eventgrid.azure.net/api/events"
TOPIC_ACCESS_KEY="<Use the output saved earlier>"

# Save the .env file and close it.

# Add the code for the project
code Program.cs
# Replace any existing code with the following code.
using dotenv.net; 
using Azure.Messaging.EventGrid; 

// Load environment variables from .env file
DotEnv.Load();
var envVars = DotEnv.Read();

// Start the asynchronous process to send an Event Grid event
ProcessAsync().GetAwaiter().GetResult();

async Task ProcessAsync()
{
    // Retrieve Event Grid topic endpoint and access key from environment variables
    var topicEndpoint = envVars["TOPIC_ENDPOINT"];
    var topicKey = envVars["TOPIC_ACCESS_KEY"];
    
    // Check if the required environment variables are set
    if (string.IsNullOrEmpty(topicEndpoint) || string.IsNullOrEmpty(topicKey))
    {
        Console.WriteLine("Please set TOPIC_ENDPOINT and TOPIC_ACCESS_KEY in your .env file.");
        return;
    }

    // Create an EventGridPublisherClient to send events to the specified topic
    EventGridPublisherClient client = new EventGridPublisherClient
        (new Uri(topicEndpoint),
        new Azure.AzureKeyCredential(topicKey));

    // Create a new EventGridEvent with sample data
    var eventGridEvent = new EventGridEvent(
        subject: "ExampleSubject",
        eventType: "ExampleEventType",
        dataVersion: "1.0",
        data: new { Message = "Hello, Event Grid!" }
    );

    // Send the event to Azure Event Grid
    await client.SendEventAsync(eventGridEvent);
    Console.WriteLine("Event sent successfully.");
}

# save the file and close it.

# Sign into Azure and run the app
az login
dotnet run
# View your web app to see the event you just sent. Select the eye icon to expand the event data.
